// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
}

model Establishment {
  id       String    @id @default(uuid())
  name     String
  address  String
  imageUrl String
  services Service[]
  bookings Booking[]
  employees  Employee[]
  managers ManagerEstablishment[]
}

model ManagerEstablishment {
  id String @id @default(uuid())
  managerId String
  manager Manager @relation(fields: [managerId], references: [id])
  establishmentId   String
  establishment     Establishment       @relation(fields: [establishmentId], references: [id])
}

model Manager {
  id  String @id @default(uuid())
  name String
  email String
  establishments ManagerEstablishment[]
}

model Employee {
  id             String           @id @default(cuid())
  name           String
  image          String?
  role           String
  email          String?
  EmployeeServices EmployeeServices[]
  establishmentId   String
  establishment     Establishment       @relation(fields: [establishmentId], references: [id])
  bookings       Booking[]
}

model EmployeeServices {
  id        String  @id @default(uuid())
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id])
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])
}

model Service {
  id             String           @id @default(uuid())
  name           String
  price          Decimal          @db.Decimal(10, 2)
  timeSpend      Int
  establishmentId   String
  establishment     Establishment       @relation(fields: [establishmentId], references: [id])
  description    String
  bookings       Booking[]
  imageUrl       String
  employeeServices EmployeeServices[]
}

model Booking {
  id           String     @id @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  serviceId    String?
  service      Service?    @relation(fields: [serviceId], references: [id])
  date         DateTime
  establishmentId String
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  employeeId     String
  employee       Employee     @relation(fields: [employeeId], references: [id])
}

//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
